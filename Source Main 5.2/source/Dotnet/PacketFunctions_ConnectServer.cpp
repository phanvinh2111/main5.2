// <copyright file="PacketFunctions.cpp" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This source code was auto-generated by an XSL transformation.
//     Do not change this file. Instead, change the XML data which contains
//     the packet definitions and re-run the transformation (publish/rebuild the
//     client library project).
// </auto-generated>
//------------------------------------------------------------------------------

#include "stdafx.h"
#include "PacketFunctions_ConnectServer.h"
#include "PacketBindings_ConnectServer.h"


void PacketFunctions_ConnectServer::SendConnectionInfoRequest075(BYTE serverId)
{
    dotnet_SendConnectionInfoRequest075(this->GetHandle(), serverId);
}

void PacketFunctions_ConnectServer::SendConnectionInfoRequest(uint16_t serverId)
{
    dotnet_SendConnectionInfoRequest(this->GetHandle(), serverId);
}

void PacketFunctions_ConnectServer::SendConnectionInfo(const wchar_t* ipAddress, uint16_t port)
{
    dotnet_SendConnectionInfo(this->GetHandle(), ipAddress, port);
}

void PacketFunctions_ConnectServer::SendServerListRequest()
{
    dotnet_SendServerListRequest(this->GetHandle());
}

void PacketFunctions_ConnectServer::SendServerListRequestOld()
{
    dotnet_SendServerListRequestOld(this->GetHandle());
}

void PacketFunctions_ConnectServer::SendHello()
{
    dotnet_SendHello(this->GetHandle());
}

void PacketFunctions_ConnectServer::SendPatchCheckRequest(BYTE majorVersion, BYTE minorVersion, BYTE patchVersion)
{
    dotnet_SendPatchCheckRequest(this->GetHandle(), majorVersion, minorVersion, patchVersion);
}

void PacketFunctions_ConnectServer::SendPatchVersionOkay()
{
    dotnet_SendPatchVersionOkay(this->GetHandle());
}

void PacketFunctions_ConnectServer::SendClientNeedsPatch(BYTE patchVersion, const wchar_t* patchAddress)
{
    dotnet_SendClientNeedsPatch(this->GetHandle(), patchVersion, patchAddress);
}
