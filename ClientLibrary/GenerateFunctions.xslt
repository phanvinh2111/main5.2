<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl"
    xmlns:pd="http://www.munique.net/OpenMU/PacketDefinitions"
>
  <xsl:param name="resultFileName" />
  <xsl:param name="subNamespace" />
  <xsl:output method="text" indent="yes" />
  <xsl:include href="Common.xslt" />

  <xsl:template match="pd:PacketDefinitions">
    <xsl:text>// &lt;copyright file="PacketFunctions.cpp" company="MUnique"&gt;
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// &lt;/copyright&gt;

//------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This source code was auto-generated by an XSL transformation.
//     Do not change this file. Instead, change the XML data which contains
//     the packet definitions and re-run the transformation (publish/rebuild the
//     client library project).
// &lt;/auto-generated&gt;
//------------------------------------------------------------------------------

#include "stdafx.h"
#include "PacketFunctions_</xsl:text><xsl:value-of select="$subNamespace"/><xsl:text>.h"
#include "PacketBindings_</xsl:text><xsl:value-of select="$subNamespace"/><xsl:text>.h"

</xsl:text>

    <xsl:apply-templates select="pd:Packets/pd:Packet" mode="function" />

  </xsl:template>

  <xsl:template match="pd:Packet[not(pd:Fields/pd:Field/pd:Type = 'Structure[]')]" mode="function">
    <xsl:value-of select="$newline" />
    <xsl:text>void PacketFunctions_</xsl:text><xsl:value-of select="$subNamespace"/><xsl:text>::Send</xsl:text>
    <xsl:apply-templates select="pd:Name" />
    <xsl:text>(</xsl:text>
    <xsl:apply-templates select="pd:Fields/pd:Field" mode="nativeparams_impl">
      <xsl:sort select="pd:DefaultValue"/>
    </xsl:apply-templates>
    <xsl:text>)</xsl:text>
    <xsl:value-of select="$newline"/>
    <xsl:text>{
    dotnet_Send</xsl:text>
    <xsl:apply-templates select="pd:Name" />
    <xsl:text>(this->GetHandle()</xsl:text>
	<xsl:apply-templates select="pd:Fields/pd:Field" mode="passparams">
      <xsl:sort select="pd:DefaultValue"/>
    </xsl:apply-templates>
    <xsl:text>);
}
</xsl:text>
  </xsl:template>

  <xsl:template match="pd:Field" mode="passparams">
    <xsl:text>, </xsl:text>    
    <xsl:call-template name="LowerCaseName" />
    <xsl:if test="(pd:Type = 'Binary')">
    	<xsl:text>, </xsl:text>
		<xsl:call-template name="LowerCaseName" />
		<xsl:text>ByteLength</xsl:text>
    </xsl:if>
  </xsl:template>

  <xsl:template match="pd:Field" mode="listparams">
    <xsl:if test="position() > 1">
      <xsl:text>, </xsl:text>
    </xsl:if>
    <xsl:text>@</xsl:text>
    <xsl:call-template name="LowerCaseName" />
  </xsl:template>

  <xsl:template match="text()" mode="function"></xsl:template>
  <xsl:template match="text()" mode="listparams"></xsl:template>
  <xsl:template match="text()"></xsl:template>

</xsl:stylesheet>
